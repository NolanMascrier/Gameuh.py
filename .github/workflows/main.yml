name: Build C Wrapper v0.2.0

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip git build-essential
          sudo apt install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
          sudo apt install -y libglew-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev
          sudo apt install -y libcurl4-openssl-dev
          sudo apt-get update && sudo apt-get install -y libgtk-3-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Setup MSYS2
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-pkg-config
            make

      - name: Build
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: make

      - name: Setup environment for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y msys2
          $env:PATH = "C:\tools\msys64\usr\bin;$env:PATH"
          pacman --noconfirm -Syuu
          pacman --noconfirm -S mingw-w64-x86_64-gcc mingw-w64-x86_64-make
          pacman --noconfirm -S mingw-w64-x86_64-curl
          curl -LO https://www.nuget.org/api/v2/package/python/3.12.2
          7z x 3.12.2 -opython-win
          move python-win\tools\* python-win\
          rm 3.12.2

          curl -LO https://github.com/git-for-windows/git/releases/download/v2.44.0.windows.1/PortableGit-2.44.0-64-bit.7z.exe
          mkdir git-win
          7z x PortableGit-2.44.0-64-bit.7z.exe -ogit-win
          rm PortableGit-2.44.0-64-bit.7z.exe

          python-win\python.exe -m pip install --upgrade pip
          python-win\python.exe -m pip install -r requirements.txt

          curl -LO https://github.com/libsdl-org/SDL/releases/download/release-2.30.2/SDL2-devel-2.30.2-VC.zip
          7z x SDL2-devel-2.30.2-VC.zip -oSDL2
          copy SDL2\SDL2-2.30.2\lib\x64\SDL2.dll .
          curl -LO https://sourceforge.net/projects/glew/files/glew/2.2.0/glew-2.2.0-win32.zip
          7z x glew-2.2.0-win32.zip -oglew
          copy glew\glew-2.2.0\bin\Release\x64\glew32.dll .
          rm SDL2-devel-2.30.2-VC.zip
          rm glew-2.2.0-win32.zip

      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd wrapper
          make

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd wrapper
          make

      - name: Insert version into README (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd wrapper
          sed -i "s/{{VERSION}}/${{ github.ref_name }}/g" README.md
      
      - name: Insert version into README (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd wrapper
          powershell -Command "(Get-Content README.md) -replace '{{VERSION}}', '${{ github.ref_name }}' | Set-Content README.md"

      - name: Package final zip for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist
          cp wrapper/launcher dist/
          cp wrapper/README.md dist/
          cd dist
          zip -r ../Game-${{ github.ref_name }}-linux.zip .
          cd ..

      - name: Package final zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy wrapper\\README.md dist\\
          copy wrapper\\launcher.exe dist\\
          xcopy python-win dist\\python-win\\ /E /I /Y
          xcopy git-win dist\\git-win\\ /E /I /Y
          powershell -Command "Compress-Archive -Path dist\\* -DestinationPath Game-${{ github.ref_name }}-windows.zip"

      - name: Upload to GitHub Release (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: Game-${{ github.ref_name }}-linux.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: Game-${{ github.ref_name }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
