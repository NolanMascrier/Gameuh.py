name: Build C Wrapper v0.2.0 for Windows

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-ntldd
            make

      - name: Downloading Python and Git for Windows
        if: matrix.os == 'windows-latest'
        run: |
          curl -LO https://www.nuget.org/api/v2/package/python/3.12.2
          7z x 3.12.2 -opython-win
          move python-win\tools\* python-win\
          rm 3.12.2

          curl -LO https://github.com/git-for-windows/git/releases/download/v2.44.0.windows.1/PortableGit-2.44.0-64-bit.7z.exe
          mkdir git-win
          7z x PortableGit-2.44.0-64-bit.7z.exe -ogit-win
          rm PortableGit-2.44.0-64-bit.7z.exe

          python-win\python.exe -m pip install --upgrade pip
          python-win\python.exe -m pip install -r requirements.txt

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd wrapper
          make
      
      - name: Insert version into README (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd wrapper
          powershell -Command "(Get-Content README.md) -replace '{{VERSION}}', '${{ github.ref_name }}' | Set-Content README.md"

      - name: Bundle GTK DLLs
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          mkdir -p dist
          deps=$(ntldd -R wrapper/launcher.exe | grep "/mingw64/bin/" | awk '{print $3}')
          if [ -n "$deps" ]; then
            echo "$deps" | xargs -I{} cp {} ../dist
          fi

      - name: Package final zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          copy wrapper\\README.md dist\\
          copy wrapper\\launcher.exe dist\\
          xcopy python-win dist\\python-win\\ /E /I /Y
          xcopy git-win dist\\git-win\\ /E /I /Y
          powershell -Command "Compress-Archive -Path dist\\* -DestinationPath Game-${{ github.ref_name }}-windows.zip"

      - name: Upload to GitHub Release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: Game-${{ github.ref_name }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}